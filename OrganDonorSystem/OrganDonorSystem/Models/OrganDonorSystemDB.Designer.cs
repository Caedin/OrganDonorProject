//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("OrganDonorSystemModel", "fk_BloodType_BloodType1_idx", "BloodType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(OrganDonorSystem.Models.BloodType), "Recipients", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(OrganDonorSystem.Models.Recipient), true)]
[assembly: EdmRelationshipAttribute("OrganDonorSystemModel", "Organs_BloodType", "BloodType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(OrganDonorSystem.Models.BloodType), "Organs", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(OrganDonorSystem.Models.Organ), true)]
[assembly: EdmRelationshipAttribute("OrganDonorSystemModel", "fk_State_stateID_ibfk_1", "State", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(OrganDonorSystem.Models.State), "City", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(OrganDonorSystem.Models.City), true)]
[assembly: EdmRelationshipAttribute("OrganDonorSystemModel", "Medical_Personnel_ibfk_2", "City", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(OrganDonorSystem.Models.City), "Medical_Personnel", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(OrganDonorSystem.Models.Medical_Personnel), true)]
[assembly: EdmRelationshipAttribute("OrganDonorSystemModel", "fk_Donor_medicalPersonnelID", "Medical_Personnel", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(OrganDonorSystem.Models.Medical_Personnel), "Donor", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(OrganDonorSystem.Models.Donor), true)]
[assembly: EdmRelationshipAttribute("OrganDonorSystemModel", "fk_Medical_Personnel_medicalPersonnel_idx", "Medical_Personnel", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(OrganDonorSystem.Models.Medical_Personnel), "Recipients", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(OrganDonorSystem.Models.Recipient), true)]
[assembly: EdmRelationshipAttribute("OrganDonorSystemModel", "Medical_Personnel_ibfk_1", "State", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(OrganDonorSystem.Models.State), "Medical_Personnel", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(OrganDonorSystem.Models.Medical_Personnel), true)]
[assembly: EdmRelationshipAttribute("OrganDonorSystemModel", "Organs_MedicalPersonnel", "Medical_Personnel", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(OrganDonorSystem.Models.Medical_Personnel), "Organs", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(OrganDonorSystem.Models.Organ), true)]
[assembly: EdmRelationshipAttribute("OrganDonorSystemModel", "fk_OrganExpirationTime_OrganType1", "OrganType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(OrganDonorSystem.Models.OrganType), "OrganExpirationTime", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(OrganDonorSystem.Models.OrganExpirationTime), true)]
[assembly: EdmRelationshipAttribute("OrganDonorSystemModel", "fk_organ_organID_idx", "Organs", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(OrganDonorSystem.Models.Organ), "Recipients", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(OrganDonorSystem.Models.Recipient), true)]
[assembly: EdmRelationshipAttribute("OrganDonorSystemModel", "Organs_organType", "OrganType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(OrganDonorSystem.Models.OrganType), "Organs", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(OrganDonorSystem.Models.Organ), true)]
[assembly: EdmRelationshipAttribute("OrganDonorSystemModel", "Organs_RecipientID", "Recipients", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(OrganDonorSystem.Models.Recipient), "Organs", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(OrganDonorSystem.Models.Organ), true)]
[assembly: EdmRelationshipAttribute("OrganDonorSystemModel", "fk_organType_organTypeID_ibfk_1", "OrganType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(OrganDonorSystem.Models.OrganType), "Recipients", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(OrganDonorSystem.Models.Recipient), true)]
[assembly: EdmRelationshipAttribute("OrganDonorSystemModel", "Donor_has_Organs", "Donor", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(OrganDonorSystem.Models.Donor), "Organs", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(OrganDonorSystem.Models.Organ))]
[assembly: EdmRelationshipAttribute("OrganDonorSystemModel", "Medical_Personnnel_has_Donors", "Donor", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(OrganDonorSystem.Models.Donor), "Medical_Personnel", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(OrganDonorSystem.Models.Medical_Personnel))]
[assembly: EdmRelationshipAttribute("OrganDonorSystemModel", "Medical_Personnnel_has_Recipients", "Medical_Personnel", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(OrganDonorSystem.Models.Medical_Personnel), "Recipients", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(OrganDonorSystem.Models.Recipient))]

#endregion

namespace OrganDonorSystem.Models
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class OrganDonorSystemEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new OrganDonorSystemEntities object using the connection string found in the 'OrganDonorSystemEntities' section of the application configuration file.
        /// </summary>
        public OrganDonorSystemEntities() : base("name=OrganDonorSystemEntities", "OrganDonorSystemEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new OrganDonorSystemEntities object.
        /// </summary>
        public OrganDonorSystemEntities(string connectionString) : base(connectionString, "OrganDonorSystemEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new OrganDonorSystemEntities object.
        /// </summary>
        public OrganDonorSystemEntities(EntityConnection connection) : base(connection, "OrganDonorSystemEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<BloodType> BloodTypes
        {
            get
            {
                if ((_BloodTypes == null))
                {
                    _BloodTypes = base.CreateObjectSet<BloodType>("BloodTypes");
                }
                return _BloodTypes;
            }
        }
        private ObjectSet<BloodType> _BloodTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<City> Cities
        {
            get
            {
                if ((_Cities == null))
                {
                    _Cities = base.CreateObjectSet<City>("Cities");
                }
                return _Cities;
            }
        }
        private ObjectSet<City> _Cities;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Donor> Donors
        {
            get
            {
                if ((_Donors == null))
                {
                    _Donors = base.CreateObjectSet<Donor>("Donors");
                }
                return _Donors;
            }
        }
        private ObjectSet<Donor> _Donors;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Medical_Personnel> Medical_Personnel
        {
            get
            {
                if ((_Medical_Personnel == null))
                {
                    _Medical_Personnel = base.CreateObjectSet<Medical_Personnel>("Medical_Personnel");
                }
                return _Medical_Personnel;
            }
        }
        private ObjectSet<Medical_Personnel> _Medical_Personnel;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<OrganExpirationTime> OrganExpirationTimes
        {
            get
            {
                if ((_OrganExpirationTimes == null))
                {
                    _OrganExpirationTimes = base.CreateObjectSet<OrganExpirationTime>("OrganExpirationTimes");
                }
                return _OrganExpirationTimes;
            }
        }
        private ObjectSet<OrganExpirationTime> _OrganExpirationTimes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Organ> Organs
        {
            get
            {
                if ((_Organs == null))
                {
                    _Organs = base.CreateObjectSet<Organ>("Organs");
                }
                return _Organs;
            }
        }
        private ObjectSet<Organ> _Organs;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<OrganType> OrganTypes
        {
            get
            {
                if ((_OrganTypes == null))
                {
                    _OrganTypes = base.CreateObjectSet<OrganType>("OrganTypes");
                }
                return _OrganTypes;
            }
        }
        private ObjectSet<OrganType> _OrganTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Recipient> Recipients
        {
            get
            {
                if ((_Recipients == null))
                {
                    _Recipients = base.CreateObjectSet<Recipient>("Recipients");
                }
                return _Recipients;
            }
        }
        private ObjectSet<Recipient> _Recipients;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<State> States
        {
            get
            {
                if ((_States == null))
                {
                    _States = base.CreateObjectSet<State>("States");
                }
                return _States;
            }
        }
        private ObjectSet<State> _States;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the BloodTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToBloodTypes(BloodType bloodType)
        {
            base.AddObject("BloodTypes", bloodType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Cities EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCities(City city)
        {
            base.AddObject("Cities", city);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Donors EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDonors(Donor donor)
        {
            base.AddObject("Donors", donor);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Medical_Personnel EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMedical_Personnel(Medical_Personnel medical_Personnel)
        {
            base.AddObject("Medical_Personnel", medical_Personnel);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the OrganExpirationTimes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToOrganExpirationTimes(OrganExpirationTime organExpirationTime)
        {
            base.AddObject("OrganExpirationTimes", organExpirationTime);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Organs EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToOrgans(Organ organ)
        {
            base.AddObject("Organs", organ);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the OrganTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToOrganTypes(OrganType organType)
        {
            base.AddObject("OrganTypes", organType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Recipients EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRecipients(Recipient recipient)
        {
            base.AddObject("Recipients", recipient);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the States EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToStates(State state)
        {
            base.AddObject("States", state);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="OrganDonorSystemModel", Name="BloodType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class BloodType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new BloodType object.
        /// </summary>
        /// <param name="bloodTypeID">Initial value of the bloodTypeID property.</param>
        /// <param name="bloodTypeName">Initial value of the bloodTypeName property.</param>
        public static BloodType CreateBloodType(global::System.Int32 bloodTypeID, global::System.String bloodTypeName)
        {
            BloodType bloodType = new BloodType();
            bloodType.bloodTypeID = bloodTypeID;
            bloodType.bloodTypeName = bloodTypeName;
            return bloodType;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 bloodTypeID
        {
            get
            {
                return _bloodTypeID;
            }
            set
            {
                if (_bloodTypeID != value)
                {
                    OnbloodTypeIDChanging(value);
                    ReportPropertyChanging("bloodTypeID");
                    _bloodTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("bloodTypeID");
                    OnbloodTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _bloodTypeID;
        partial void OnbloodTypeIDChanging(global::System.Int32 value);
        partial void OnbloodTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String bloodTypeName
        {
            get
            {
                return _bloodTypeName;
            }
            set
            {
                OnbloodTypeNameChanging(value);
                ReportPropertyChanging("bloodTypeName");
                _bloodTypeName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("bloodTypeName");
                OnbloodTypeNameChanged();
            }
        }
        private global::System.String _bloodTypeName;
        partial void OnbloodTypeNameChanging(global::System.String value);
        partial void OnbloodTypeNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "fk_BloodType_BloodType1_idx", "Recipients")]
        public EntityCollection<Recipient> Recipients
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Recipient>("OrganDonorSystemModel.fk_BloodType_BloodType1_idx", "Recipients");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Recipient>("OrganDonorSystemModel.fk_BloodType_BloodType1_idx", "Recipients", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "Organs_BloodType", "Organs")]
        public EntityCollection<Organ> Organs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Organ>("OrganDonorSystemModel.Organs_BloodType", "Organs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Organ>("OrganDonorSystemModel.Organs_BloodType", "Organs", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="OrganDonorSystemModel", Name="City")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class City : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new City object.
        /// </summary>
        /// <param name="cityID">Initial value of the cityID property.</param>
        /// <param name="stateStateID">Initial value of the stateStateID property.</param>
        /// <param name="city1">Initial value of the city1 property.</param>
        public static City CreateCity(global::System.Int32 cityID, global::System.Int32 stateStateID, global::System.String city1)
        {
            City city = new City();
            city.cityID = cityID;
            city.stateStateID = stateStateID;
            city.city1 = city1;
            return city;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 cityID
        {
            get
            {
                return _cityID;
            }
            set
            {
                if (_cityID != value)
                {
                    OncityIDChanging(value);
                    ReportPropertyChanging("cityID");
                    _cityID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("cityID");
                    OncityIDChanged();
                }
            }
        }
        private global::System.Int32 _cityID;
        partial void OncityIDChanging(global::System.Int32 value);
        partial void OncityIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 stateStateID
        {
            get
            {
                return _stateStateID;
            }
            set
            {
                OnstateStateIDChanging(value);
                ReportPropertyChanging("stateStateID");
                _stateStateID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("stateStateID");
                OnstateStateIDChanged();
            }
        }
        private global::System.Int32 _stateStateID;
        partial void OnstateStateIDChanging(global::System.Int32 value);
        partial void OnstateStateIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String city1
        {
            get
            {
                return _city1;
            }
            set
            {
                Oncity1Changing(value);
                ReportPropertyChanging("city1");
                _city1 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("city1");
                Oncity1Changed();
            }
        }
        private global::System.String _city1;
        partial void Oncity1Changing(global::System.String value);
        partial void Oncity1Changed();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "fk_State_stateID_ibfk_1", "State")]
        public State State
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("OrganDonorSystemModel.fk_State_stateID_ibfk_1", "State").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("OrganDonorSystemModel.fk_State_stateID_ibfk_1", "State").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<State> StateReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("OrganDonorSystemModel.fk_State_stateID_ibfk_1", "State");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<State>("OrganDonorSystemModel.fk_State_stateID_ibfk_1", "State", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "Medical_Personnel_ibfk_2", "Medical_Personnel")]
        public EntityCollection<Medical_Personnel> Medical_Personnel
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Medical_Personnel>("OrganDonorSystemModel.Medical_Personnel_ibfk_2", "Medical_Personnel");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Medical_Personnel>("OrganDonorSystemModel.Medical_Personnel_ibfk_2", "Medical_Personnel", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="OrganDonorSystemModel", Name="Donor")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Donor : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Donor object.
        /// </summary>
        /// <param name="donorID">Initial value of the DonorID property.</param>
        /// <param name="phoneNumber">Initial value of the phoneNumber property.</param>
        /// <param name="registrationDate">Initial value of the registrationDate property.</param>
        /// <param name="medicalPersonnelId">Initial value of the medicalPersonnelId property.</param>
        /// <param name="originalID">Initial value of the originalID property.</param>
        /// <param name="gender">Initial value of the gender property.</param>
        /// <param name="age">Initial value of the age property.</param>
        public static Donor CreateDonor(global::System.Int32 donorID, global::System.String phoneNumber, global::System.DateTime registrationDate, global::System.Int32 medicalPersonnelId, global::System.String originalID, global::System.String gender, global::System.Int64 age)
        {
            Donor donor = new Donor();
            donor.DonorID = donorID;
            donor.phoneNumber = phoneNumber;
            donor.registrationDate = registrationDate;
            donor.medicalPersonnelId = medicalPersonnelId;
            donor.originalID = originalID;
            donor.gender = gender;
            donor.age = age;
            return donor;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DonorID
        {
            get
            {
                return _DonorID;
            }
            set
            {
                if (_DonorID != value)
                {
                    OnDonorIDChanging(value);
                    ReportPropertyChanging("DonorID");
                    _DonorID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DonorID");
                    OnDonorIDChanged();
                }
            }
        }
        private global::System.Int32 _DonorID;
        partial void OnDonorIDChanging(global::System.Int32 value);
        partial void OnDonorIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String phoneNumber
        {
            get
            {
                return _phoneNumber;
            }
            set
            {
                OnphoneNumberChanging(value);
                ReportPropertyChanging("phoneNumber");
                _phoneNumber = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("phoneNumber");
                OnphoneNumberChanged();
            }
        }
        private global::System.String _phoneNumber;
        partial void OnphoneNumberChanging(global::System.String value);
        partial void OnphoneNumberChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime registrationDate
        {
            get
            {
                return _registrationDate;
            }
            set
            {
                OnregistrationDateChanging(value);
                ReportPropertyChanging("registrationDate");
                _registrationDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("registrationDate");
                OnregistrationDateChanged();
            }
        }
        private global::System.DateTime _registrationDate;
        partial void OnregistrationDateChanging(global::System.DateTime value);
        partial void OnregistrationDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> endDate
        {
            get
            {
                return _endDate;
            }
            set
            {
                OnendDateChanging(value);
                ReportPropertyChanging("endDate");
                _endDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("endDate");
                OnendDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _endDate;
        partial void OnendDateChanging(Nullable<global::System.DateTime> value);
        partial void OnendDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 medicalPersonnelId
        {
            get
            {
                return _medicalPersonnelId;
            }
            set
            {
                OnmedicalPersonnelIdChanging(value);
                ReportPropertyChanging("medicalPersonnelId");
                _medicalPersonnelId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("medicalPersonnelId");
                OnmedicalPersonnelIdChanged();
            }
        }
        private global::System.Int32 _medicalPersonnelId;
        partial void OnmedicalPersonnelIdChanging(global::System.Int32 value);
        partial void OnmedicalPersonnelIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String originalID
        {
            get
            {
                return _originalID;
            }
            set
            {
                OnoriginalIDChanging(value);
                ReportPropertyChanging("originalID");
                _originalID = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("originalID");
                OnoriginalIDChanged();
            }
        }
        private global::System.String _originalID;
        partial void OnoriginalIDChanging(global::System.String value);
        partial void OnoriginalIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String gender
        {
            get
            {
                return _gender;
            }
            set
            {
                OngenderChanging(value);
                ReportPropertyChanging("gender");
                _gender = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("gender");
                OngenderChanged();
            }
        }
        private global::System.String _gender;
        partial void OngenderChanging(global::System.String value);
        partial void OngenderChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 age
        {
            get
            {
                return _age;
            }
            set
            {
                OnageChanging(value);
                ReportPropertyChanging("age");
                _age = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("age");
                OnageChanged();
            }
        }
        private global::System.Int64 _age;
        partial void OnageChanging(global::System.Int64 value);
        partial void OnageChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "fk_Donor_medicalPersonnelID", "Medical_Personnel")]
        public Medical_Personnel Medical_Personnel
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Medical_Personnel>("OrganDonorSystemModel.fk_Donor_medicalPersonnelID", "Medical_Personnel").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Medical_Personnel>("OrganDonorSystemModel.fk_Donor_medicalPersonnelID", "Medical_Personnel").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Medical_Personnel> Medical_PersonnelReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Medical_Personnel>("OrganDonorSystemModel.fk_Donor_medicalPersonnelID", "Medical_Personnel");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Medical_Personnel>("OrganDonorSystemModel.fk_Donor_medicalPersonnelID", "Medical_Personnel", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "Donor_has_Organs", "Organs")]
        public EntityCollection<Organ> Organs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Organ>("OrganDonorSystemModel.Donor_has_Organs", "Organs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Organ>("OrganDonorSystemModel.Donor_has_Organs", "Organs", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "Medical_Personnnel_has_Donors", "Medical_Personnel")]
        public EntityCollection<Medical_Personnel> Medical_Personnel1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Medical_Personnel>("OrganDonorSystemModel.Medical_Personnnel_has_Donors", "Medical_Personnel");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Medical_Personnel>("OrganDonorSystemModel.Medical_Personnnel_has_Donors", "Medical_Personnel", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="OrganDonorSystemModel", Name="Medical_Personnel")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Medical_Personnel : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Medical_Personnel object.
        /// </summary>
        /// <param name="medicalPersonnelId">Initial value of the medicalPersonnelId property.</param>
        /// <param name="userName">Initial value of the userName property.</param>
        /// <param name="userPassword">Initial value of the userPassword property.</param>
        /// <param name="medicalFacility">Initial value of the medicalFacility property.</param>
        /// <param name="contactEmail">Initial value of the contactEmail property.</param>
        /// <param name="phoneNumber">Initial value of the phoneNumber property.</param>
        /// <param name="validatedUser">Initial value of the validatedUser property.</param>
        /// <param name="create_time">Initial value of the create_time property.</param>
        /// <param name="state_StateID">Initial value of the State_StateID property.</param>
        /// <param name="city_CityID">Initial value of the City_CityID property.</param>
        public static Medical_Personnel CreateMedical_Personnel(global::System.Int32 medicalPersonnelId, global::System.String userName, global::System.String userPassword, global::System.String medicalFacility, global::System.String contactEmail, global::System.String phoneNumber, global::System.Boolean validatedUser, global::System.DateTime create_time, global::System.Int32 state_StateID, global::System.Int32 city_CityID)
        {
            Medical_Personnel medical_Personnel = new Medical_Personnel();
            medical_Personnel.medicalPersonnelId = medicalPersonnelId;
            medical_Personnel.userName = userName;
            medical_Personnel.userPassword = userPassword;
            medical_Personnel.medicalFacility = medicalFacility;
            medical_Personnel.contactEmail = contactEmail;
            medical_Personnel.phoneNumber = phoneNumber;
            medical_Personnel.validatedUser = validatedUser;
            medical_Personnel.create_time = create_time;
            medical_Personnel.State_StateID = state_StateID;
            medical_Personnel.City_CityID = city_CityID;
            return medical_Personnel;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 medicalPersonnelId
        {
            get
            {
                return _medicalPersonnelId;
            }
            set
            {
                if (_medicalPersonnelId != value)
                {
                    OnmedicalPersonnelIdChanging(value);
                    ReportPropertyChanging("medicalPersonnelId");
                    _medicalPersonnelId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("medicalPersonnelId");
                    OnmedicalPersonnelIdChanged();
                }
            }
        }
        private global::System.Int32 _medicalPersonnelId;
        partial void OnmedicalPersonnelIdChanging(global::System.Int32 value);
        partial void OnmedicalPersonnelIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String userName
        {
            get
            {
                return _userName;
            }
            set
            {
                OnuserNameChanging(value);
                ReportPropertyChanging("userName");
                _userName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("userName");
                OnuserNameChanged();
            }
        }
        private global::System.String _userName;
        partial void OnuserNameChanging(global::System.String value);
        partial void OnuserNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String userPassword
        {
            get
            {
                return _userPassword;
            }
            set
            {
                OnuserPasswordChanging(value);
                ReportPropertyChanging("userPassword");
                _userPassword = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("userPassword");
                OnuserPasswordChanged();
            }
        }
        private global::System.String _userPassword;
        partial void OnuserPasswordChanging(global::System.String value);
        partial void OnuserPasswordChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String medicalFacility
        {
            get
            {
                return _medicalFacility;
            }
            set
            {
                OnmedicalFacilityChanging(value);
                ReportPropertyChanging("medicalFacility");
                _medicalFacility = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("medicalFacility");
                OnmedicalFacilityChanged();
            }
        }
        private global::System.String _medicalFacility;
        partial void OnmedicalFacilityChanging(global::System.String value);
        partial void OnmedicalFacilityChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String contactEmail
        {
            get
            {
                return _contactEmail;
            }
            set
            {
                OncontactEmailChanging(value);
                ReportPropertyChanging("contactEmail");
                _contactEmail = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("contactEmail");
                OncontactEmailChanged();
            }
        }
        private global::System.String _contactEmail;
        partial void OncontactEmailChanging(global::System.String value);
        partial void OncontactEmailChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String phoneNumber
        {
            get
            {
                return _phoneNumber;
            }
            set
            {
                OnphoneNumberChanging(value);
                ReportPropertyChanging("phoneNumber");
                _phoneNumber = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("phoneNumber");
                OnphoneNumberChanged();
            }
        }
        private global::System.String _phoneNumber;
        partial void OnphoneNumberChanging(global::System.String value);
        partial void OnphoneNumberChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean validatedUser
        {
            get
            {
                return _validatedUser;
            }
            set
            {
                OnvalidatedUserChanging(value);
                ReportPropertyChanging("validatedUser");
                _validatedUser = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("validatedUser");
                OnvalidatedUserChanged();
            }
        }
        private global::System.Boolean _validatedUser;
        partial void OnvalidatedUserChanging(global::System.Boolean value);
        partial void OnvalidatedUserChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime create_time
        {
            get
            {
                return _create_time;
            }
            set
            {
                Oncreate_timeChanging(value);
                ReportPropertyChanging("create_time");
                _create_time = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("create_time");
                Oncreate_timeChanged();
            }
        }
        private global::System.DateTime _create_time;
        partial void Oncreate_timeChanging(global::System.DateTime value);
        partial void Oncreate_timeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 State_StateID
        {
            get
            {
                return _State_StateID;
            }
            set
            {
                OnState_StateIDChanging(value);
                ReportPropertyChanging("State_StateID");
                _State_StateID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("State_StateID");
                OnState_StateIDChanged();
            }
        }
        private global::System.Int32 _State_StateID;
        partial void OnState_StateIDChanging(global::System.Int32 value);
        partial void OnState_StateIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 City_CityID
        {
            get
            {
                return _City_CityID;
            }
            set
            {
                OnCity_CityIDChanging(value);
                ReportPropertyChanging("City_CityID");
                _City_CityID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("City_CityID");
                OnCity_CityIDChanged();
            }
        }
        private global::System.Int32 _City_CityID;
        partial void OnCity_CityIDChanging(global::System.Int32 value);
        partial void OnCity_CityIDChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "Medical_Personnel_ibfk_2", "City")]
        public City City
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("OrganDonorSystemModel.Medical_Personnel_ibfk_2", "City").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("OrganDonorSystemModel.Medical_Personnel_ibfk_2", "City").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<City> CityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("OrganDonorSystemModel.Medical_Personnel_ibfk_2", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<City>("OrganDonorSystemModel.Medical_Personnel_ibfk_2", "City", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "fk_Donor_medicalPersonnelID", "Donor")]
        public EntityCollection<Donor> Donors
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Donor>("OrganDonorSystemModel.fk_Donor_medicalPersonnelID", "Donor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Donor>("OrganDonorSystemModel.fk_Donor_medicalPersonnelID", "Donor", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "fk_Medical_Personnel_medicalPersonnel_idx", "Recipients")]
        public EntityCollection<Recipient> Recipients
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Recipient>("OrganDonorSystemModel.fk_Medical_Personnel_medicalPersonnel_idx", "Recipients");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Recipient>("OrganDonorSystemModel.fk_Medical_Personnel_medicalPersonnel_idx", "Recipients", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "Medical_Personnel_ibfk_1", "State")]
        public State State
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("OrganDonorSystemModel.Medical_Personnel_ibfk_1", "State").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("OrganDonorSystemModel.Medical_Personnel_ibfk_1", "State").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<State> StateReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("OrganDonorSystemModel.Medical_Personnel_ibfk_1", "State");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<State>("OrganDonorSystemModel.Medical_Personnel_ibfk_1", "State", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "Organs_MedicalPersonnel", "Organs")]
        public EntityCollection<Organ> Organs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Organ>("OrganDonorSystemModel.Organs_MedicalPersonnel", "Organs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Organ>("OrganDonorSystemModel.Organs_MedicalPersonnel", "Organs", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "Medical_Personnnel_has_Donors", "Donor")]
        public EntityCollection<Donor> Donors1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Donor>("OrganDonorSystemModel.Medical_Personnnel_has_Donors", "Donor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Donor>("OrganDonorSystemModel.Medical_Personnnel_has_Donors", "Donor", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "Medical_Personnnel_has_Recipients", "Recipients")]
        public EntityCollection<Recipient> Recipients1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Recipient>("OrganDonorSystemModel.Medical_Personnnel_has_Recipients", "Recipients");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Recipient>("OrganDonorSystemModel.Medical_Personnnel_has_Recipients", "Recipients", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="OrganDonorSystemModel", Name="Organ")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Organ : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Organ object.
        /// </summary>
        /// <param name="organID">Initial value of the OrganID property.</param>
        /// <param name="organType_organtypeID">Initial value of the organType_organtypeID property.</param>
        /// <param name="bloodType_BloodTypeID">Initial value of the BloodType_BloodTypeID property.</param>
        /// <param name="dateAqcuired">Initial value of the dateAqcuired property.</param>
        /// <param name="expirationDate">Initial value of the expirationDate property.</param>
        /// <param name="medicalPersonnelID">Initial value of the MedicalPersonnelID property.</param>
        /// <param name="originalID">Initial value of the OriginalID property.</param>
        /// <param name="available">Initial value of the available property.</param>
        public static Organ CreateOrgan(global::System.Int32 organID, global::System.Int32 organType_organtypeID, global::System.Int32 bloodType_BloodTypeID, global::System.DateTime dateAqcuired, global::System.DateTime expirationDate, global::System.Int32 medicalPersonnelID, global::System.String originalID, global::System.Boolean available)
        {
            Organ organ = new Organ();
            organ.OrganID = organID;
            organ.organType_organtypeID = organType_organtypeID;
            organ.BloodType_BloodTypeID = bloodType_BloodTypeID;
            organ.dateAqcuired = dateAqcuired;
            organ.expirationDate = expirationDate;
            organ.MedicalPersonnelID = medicalPersonnelID;
            organ.OriginalID = originalID;
            organ.available = available;
            return organ;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 OrganID
        {
            get
            {
                return _OrganID;
            }
            set
            {
                if (_OrganID != value)
                {
                    OnOrganIDChanging(value);
                    ReportPropertyChanging("OrganID");
                    _OrganID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("OrganID");
                    OnOrganIDChanged();
                }
            }
        }
        private global::System.Int32 _OrganID;
        partial void OnOrganIDChanging(global::System.Int32 value);
        partial void OnOrganIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 organType_organtypeID
        {
            get
            {
                return _organType_organtypeID;
            }
            set
            {
                OnorganType_organtypeIDChanging(value);
                ReportPropertyChanging("organType_organtypeID");
                _organType_organtypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("organType_organtypeID");
                OnorganType_organtypeIDChanged();
            }
        }
        private global::System.Int32 _organType_organtypeID;
        partial void OnorganType_organtypeIDChanging(global::System.Int32 value);
        partial void OnorganType_organtypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 BloodType_BloodTypeID
        {
            get
            {
                return _BloodType_BloodTypeID;
            }
            set
            {
                OnBloodType_BloodTypeIDChanging(value);
                ReportPropertyChanging("BloodType_BloodTypeID");
                _BloodType_BloodTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BloodType_BloodTypeID");
                OnBloodType_BloodTypeIDChanged();
            }
        }
        private global::System.Int32 _BloodType_BloodTypeID;
        partial void OnBloodType_BloodTypeIDChanging(global::System.Int32 value);
        partial void OnBloodType_BloodTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime dateAqcuired
        {
            get
            {
                return _dateAqcuired;
            }
            set
            {
                OndateAqcuiredChanging(value);
                ReportPropertyChanging("dateAqcuired");
                _dateAqcuired = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("dateAqcuired");
                OndateAqcuiredChanged();
            }
        }
        private global::System.DateTime _dateAqcuired;
        partial void OndateAqcuiredChanging(global::System.DateTime value);
        partial void OndateAqcuiredChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime expirationDate
        {
            get
            {
                return _expirationDate;
            }
            set
            {
                OnexpirationDateChanging(value);
                ReportPropertyChanging("expirationDate");
                _expirationDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("expirationDate");
                OnexpirationDateChanged();
            }
        }
        private global::System.DateTime _expirationDate;
        partial void OnexpirationDateChanging(global::System.DateTime value);
        partial void OnexpirationDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MedicalPersonnelID
        {
            get
            {
                return _MedicalPersonnelID;
            }
            set
            {
                OnMedicalPersonnelIDChanging(value);
                ReportPropertyChanging("MedicalPersonnelID");
                _MedicalPersonnelID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MedicalPersonnelID");
                OnMedicalPersonnelIDChanged();
            }
        }
        private global::System.Int32 _MedicalPersonnelID;
        partial void OnMedicalPersonnelIDChanging(global::System.Int32 value);
        partial void OnMedicalPersonnelIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String OriginalID
        {
            get
            {
                return _OriginalID;
            }
            set
            {
                OnOriginalIDChanging(value);
                ReportPropertyChanging("OriginalID");
                _OriginalID = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("OriginalID");
                OnOriginalIDChanged();
            }
        }
        private global::System.String _OriginalID;
        partial void OnOriginalIDChanging(global::System.String value);
        partial void OnOriginalIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean available
        {
            get
            {
                return _available;
            }
            set
            {
                OnavailableChanging(value);
                ReportPropertyChanging("available");
                _available = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("available");
                OnavailableChanged();
            }
        }
        private global::System.Boolean _available;
        partial void OnavailableChanging(global::System.Boolean value);
        partial void OnavailableChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Recipient_RecipientID
        {
            get
            {
                return _Recipient_RecipientID;
            }
            set
            {
                OnRecipient_RecipientIDChanging(value);
                ReportPropertyChanging("Recipient_RecipientID");
                _Recipient_RecipientID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Recipient_RecipientID");
                OnRecipient_RecipientIDChanged();
            }
        }
        private Nullable<global::System.Int32> _Recipient_RecipientID;
        partial void OnRecipient_RecipientIDChanging(Nullable<global::System.Int32> value);
        partial void OnRecipient_RecipientIDChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "Organs_BloodType", "BloodType")]
        public BloodType BloodType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<BloodType>("OrganDonorSystemModel.Organs_BloodType", "BloodType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<BloodType>("OrganDonorSystemModel.Organs_BloodType", "BloodType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<BloodType> BloodTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<BloodType>("OrganDonorSystemModel.Organs_BloodType", "BloodType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<BloodType>("OrganDonorSystemModel.Organs_BloodType", "BloodType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "Organs_MedicalPersonnel", "Medical_Personnel")]
        public Medical_Personnel Medical_Personnel
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Medical_Personnel>("OrganDonorSystemModel.Organs_MedicalPersonnel", "Medical_Personnel").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Medical_Personnel>("OrganDonorSystemModel.Organs_MedicalPersonnel", "Medical_Personnel").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Medical_Personnel> Medical_PersonnelReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Medical_Personnel>("OrganDonorSystemModel.Organs_MedicalPersonnel", "Medical_Personnel");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Medical_Personnel>("OrganDonorSystemModel.Organs_MedicalPersonnel", "Medical_Personnel", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "fk_organ_organID_idx", "Recipients")]
        public EntityCollection<Recipient> Recipients
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Recipient>("OrganDonorSystemModel.fk_organ_organID_idx", "Recipients");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Recipient>("OrganDonorSystemModel.fk_organ_organID_idx", "Recipients", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "Organs_organType", "OrganType")]
        public OrganType OrganType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<OrganType>("OrganDonorSystemModel.Organs_organType", "OrganType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<OrganType>("OrganDonorSystemModel.Organs_organType", "OrganType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<OrganType> OrganTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<OrganType>("OrganDonorSystemModel.Organs_organType", "OrganType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<OrganType>("OrganDonorSystemModel.Organs_organType", "OrganType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "Organs_RecipientID", "Recipients")]
        public Recipient Recipient
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Recipient>("OrganDonorSystemModel.Organs_RecipientID", "Recipients").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Recipient>("OrganDonorSystemModel.Organs_RecipientID", "Recipients").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Recipient> RecipientReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Recipient>("OrganDonorSystemModel.Organs_RecipientID", "Recipients");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Recipient>("OrganDonorSystemModel.Organs_RecipientID", "Recipients", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "Donor_has_Organs", "Donor")]
        public EntityCollection<Donor> Donors
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Donor>("OrganDonorSystemModel.Donor_has_Organs", "Donor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Donor>("OrganDonorSystemModel.Donor_has_Organs", "Donor", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="OrganDonorSystemModel", Name="OrganExpirationTime")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class OrganExpirationTime : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new OrganExpirationTime object.
        /// </summary>
        /// <param name="timeUntilExpiration">Initial value of the timeUntilExpiration property.</param>
        /// <param name="organType_organTypeID">Initial value of the organType_organTypeID property.</param>
        public static OrganExpirationTime CreateOrganExpirationTime(global::System.TimeSpan timeUntilExpiration, global::System.Int32 organType_organTypeID)
        {
            OrganExpirationTime organExpirationTime = new OrganExpirationTime();
            organExpirationTime.timeUntilExpiration = timeUntilExpiration;
            organExpirationTime.organType_organTypeID = organType_organTypeID;
            return organExpirationTime;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.TimeSpan timeUntilExpiration
        {
            get
            {
                return _timeUntilExpiration;
            }
            set
            {
                if (_timeUntilExpiration != value)
                {
                    OntimeUntilExpirationChanging(value);
                    ReportPropertyChanging("timeUntilExpiration");
                    _timeUntilExpiration = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("timeUntilExpiration");
                    OntimeUntilExpirationChanged();
                }
            }
        }
        private global::System.TimeSpan _timeUntilExpiration;
        partial void OntimeUntilExpirationChanging(global::System.TimeSpan value);
        partial void OntimeUntilExpirationChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 organType_organTypeID
        {
            get
            {
                return _organType_organTypeID;
            }
            set
            {
                if (_organType_organTypeID != value)
                {
                    OnorganType_organTypeIDChanging(value);
                    ReportPropertyChanging("organType_organTypeID");
                    _organType_organTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("organType_organTypeID");
                    OnorganType_organTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _organType_organTypeID;
        partial void OnorganType_organTypeIDChanging(global::System.Int32 value);
        partial void OnorganType_organTypeIDChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "fk_OrganExpirationTime_OrganType1", "OrganType")]
        public OrganType OrganType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<OrganType>("OrganDonorSystemModel.fk_OrganExpirationTime_OrganType1", "OrganType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<OrganType>("OrganDonorSystemModel.fk_OrganExpirationTime_OrganType1", "OrganType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<OrganType> OrganTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<OrganType>("OrganDonorSystemModel.fk_OrganExpirationTime_OrganType1", "OrganType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<OrganType>("OrganDonorSystemModel.fk_OrganExpirationTime_OrganType1", "OrganType", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="OrganDonorSystemModel", Name="OrganType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class OrganType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new OrganType object.
        /// </summary>
        /// <param name="organTypeID">Initial value of the organTypeID property.</param>
        /// <param name="organName">Initial value of the organName property.</param>
        public static OrganType CreateOrganType(global::System.Int32 organTypeID, global::System.String organName)
        {
            OrganType organType = new OrganType();
            organType.organTypeID = organTypeID;
            organType.organName = organName;
            return organType;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 organTypeID
        {
            get
            {
                return _organTypeID;
            }
            set
            {
                if (_organTypeID != value)
                {
                    OnorganTypeIDChanging(value);
                    ReportPropertyChanging("organTypeID");
                    _organTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("organTypeID");
                    OnorganTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _organTypeID;
        partial void OnorganTypeIDChanging(global::System.Int32 value);
        partial void OnorganTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String organName
        {
            get
            {
                return _organName;
            }
            set
            {
                OnorganNameChanging(value);
                ReportPropertyChanging("organName");
                _organName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("organName");
                OnorganNameChanged();
            }
        }
        private global::System.String _organName;
        partial void OnorganNameChanging(global::System.String value);
        partial void OnorganNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "fk_OrganExpirationTime_OrganType1", "OrganExpirationTime")]
        public EntityCollection<OrganExpirationTime> OrganExpirationTimes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<OrganExpirationTime>("OrganDonorSystemModel.fk_OrganExpirationTime_OrganType1", "OrganExpirationTime");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<OrganExpirationTime>("OrganDonorSystemModel.fk_OrganExpirationTime_OrganType1", "OrganExpirationTime", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "Organs_organType", "Organs")]
        public EntityCollection<Organ> Organs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Organ>("OrganDonorSystemModel.Organs_organType", "Organs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Organ>("OrganDonorSystemModel.Organs_organType", "Organs", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "fk_organType_organTypeID_ibfk_1", "Recipients")]
        public EntityCollection<Recipient> Recipients
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Recipient>("OrganDonorSystemModel.fk_organType_organTypeID_ibfk_1", "Recipients");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Recipient>("OrganDonorSystemModel.fk_organType_organTypeID_ibfk_1", "Recipients", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="OrganDonorSystemModel", Name="Recipient")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Recipient : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Recipient object.
        /// </summary>
        /// <param name="recipentID">Initial value of the recipentID property.</param>
        /// <param name="medicalPersonnelID">Initial value of the medicalPersonnelID property.</param>
        /// <param name="severity">Initial value of the severity property.</param>
        /// <param name="gender">Initial value of the gender property.</param>
        /// <param name="dateRegistered">Initial value of the dateRegistered property.</param>
        /// <param name="age">Initial value of the age property.</param>
        /// <param name="organTypeOrganTypeID">Initial value of the organTypeOrganTypeID property.</param>
        /// <param name="bloodTypeBloodTypeID">Initial value of the bloodTypeBloodTypeID property.</param>
        public static Recipient CreateRecipient(global::System.Int32 recipentID, global::System.Int32 medicalPersonnelID, global::System.String severity, global::System.String gender, global::System.DateTime dateRegistered, global::System.Int64 age, global::System.Int32 organTypeOrganTypeID, global::System.Int32 bloodTypeBloodTypeID)
        {
            Recipient recipient = new Recipient();
            recipient.recipentID = recipentID;
            recipient.medicalPersonnelID = medicalPersonnelID;
            recipient.severity = severity;
            recipient.gender = gender;
            recipient.dateRegistered = dateRegistered;
            recipient.age = age;
            recipient.organTypeOrganTypeID = organTypeOrganTypeID;
            recipient.bloodTypeBloodTypeID = bloodTypeBloodTypeID;
            return recipient;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 recipentID
        {
            get
            {
                return _recipentID;
            }
            set
            {
                if (_recipentID != value)
                {
                    OnrecipentIDChanging(value);
                    ReportPropertyChanging("recipentID");
                    _recipentID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("recipentID");
                    OnrecipentIDChanged();
                }
            }
        }
        private global::System.Int32 _recipentID;
        partial void OnrecipentIDChanging(global::System.Int32 value);
        partial void OnrecipentIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 medicalPersonnelID
        {
            get
            {
                return _medicalPersonnelID;
            }
            set
            {
                OnmedicalPersonnelIDChanging(value);
                ReportPropertyChanging("medicalPersonnelID");
                _medicalPersonnelID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("medicalPersonnelID");
                OnmedicalPersonnelIDChanged();
            }
        }
        private global::System.Int32 _medicalPersonnelID;
        partial void OnmedicalPersonnelIDChanging(global::System.Int32 value);
        partial void OnmedicalPersonnelIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String severity
        {
            get
            {
                return _severity;
            }
            set
            {
                OnseverityChanging(value);
                ReportPropertyChanging("severity");
                _severity = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("severity");
                OnseverityChanged();
            }
        }
        private global::System.String _severity;
        partial void OnseverityChanging(global::System.String value);
        partial void OnseverityChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String orignialID
        {
            get
            {
                return _orignialID;
            }
            set
            {
                OnorignialIDChanging(value);
                ReportPropertyChanging("orignialID");
                _orignialID = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("orignialID");
                OnorignialIDChanged();
            }
        }
        private global::System.String _orignialID;
        partial void OnorignialIDChanging(global::System.String value);
        partial void OnorignialIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String gender
        {
            get
            {
                return _gender;
            }
            set
            {
                OngenderChanging(value);
                ReportPropertyChanging("gender");
                _gender = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("gender");
                OngenderChanged();
            }
        }
        private global::System.String _gender;
        partial void OngenderChanging(global::System.String value);
        partial void OngenderChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime dateRegistered
        {
            get
            {
                return _dateRegistered;
            }
            set
            {
                OndateRegisteredChanging(value);
                ReportPropertyChanging("dateRegistered");
                _dateRegistered = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("dateRegistered");
                OndateRegisteredChanged();
            }
        }
        private global::System.DateTime _dateRegistered;
        partial void OndateRegisteredChanging(global::System.DateTime value);
        partial void OndateRegisteredChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 age
        {
            get
            {
                return _age;
            }
            set
            {
                OnageChanging(value);
                ReportPropertyChanging("age");
                _age = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("age");
                OnageChanged();
            }
        }
        private global::System.Int64 _age;
        partial void OnageChanging(global::System.Int64 value);
        partial void OnageChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> organsOrganID
        {
            get
            {
                return _organsOrganID;
            }
            set
            {
                OnorgansOrganIDChanging(value);
                ReportPropertyChanging("organsOrganID");
                _organsOrganID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("organsOrganID");
                OnorgansOrganIDChanged();
            }
        }
        private Nullable<global::System.Int32> _organsOrganID;
        partial void OnorgansOrganIDChanging(Nullable<global::System.Int32> value);
        partial void OnorgansOrganIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 organTypeOrganTypeID
        {
            get
            {
                return _organTypeOrganTypeID;
            }
            set
            {
                OnorganTypeOrganTypeIDChanging(value);
                ReportPropertyChanging("organTypeOrganTypeID");
                _organTypeOrganTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("organTypeOrganTypeID");
                OnorganTypeOrganTypeIDChanged();
            }
        }
        private global::System.Int32 _organTypeOrganTypeID;
        partial void OnorganTypeOrganTypeIDChanging(global::System.Int32 value);
        partial void OnorganTypeOrganTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 bloodTypeBloodTypeID
        {
            get
            {
                return _bloodTypeBloodTypeID;
            }
            set
            {
                OnbloodTypeBloodTypeIDChanging(value);
                ReportPropertyChanging("bloodTypeBloodTypeID");
                _bloodTypeBloodTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("bloodTypeBloodTypeID");
                OnbloodTypeBloodTypeIDChanged();
            }
        }
        private global::System.Int32 _bloodTypeBloodTypeID;
        partial void OnbloodTypeBloodTypeIDChanging(global::System.Int32 value);
        partial void OnbloodTypeBloodTypeIDChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "fk_BloodType_BloodType1_idx", "BloodType")]
        public BloodType BloodType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<BloodType>("OrganDonorSystemModel.fk_BloodType_BloodType1_idx", "BloodType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<BloodType>("OrganDonorSystemModel.fk_BloodType_BloodType1_idx", "BloodType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<BloodType> BloodTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<BloodType>("OrganDonorSystemModel.fk_BloodType_BloodType1_idx", "BloodType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<BloodType>("OrganDonorSystemModel.fk_BloodType_BloodType1_idx", "BloodType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "fk_Medical_Personnel_medicalPersonnel_idx", "Medical_Personnel")]
        public Medical_Personnel Medical_Personnel
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Medical_Personnel>("OrganDonorSystemModel.fk_Medical_Personnel_medicalPersonnel_idx", "Medical_Personnel").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Medical_Personnel>("OrganDonorSystemModel.fk_Medical_Personnel_medicalPersonnel_idx", "Medical_Personnel").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Medical_Personnel> Medical_PersonnelReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Medical_Personnel>("OrganDonorSystemModel.fk_Medical_Personnel_medicalPersonnel_idx", "Medical_Personnel");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Medical_Personnel>("OrganDonorSystemModel.fk_Medical_Personnel_medicalPersonnel_idx", "Medical_Personnel", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "fk_organ_organID_idx", "Organs")]
        public Organ Organ
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Organ>("OrganDonorSystemModel.fk_organ_organID_idx", "Organs").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Organ>("OrganDonorSystemModel.fk_organ_organID_idx", "Organs").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Organ> OrganReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Organ>("OrganDonorSystemModel.fk_organ_organID_idx", "Organs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Organ>("OrganDonorSystemModel.fk_organ_organID_idx", "Organs", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "Organs_RecipientID", "Organs")]
        public EntityCollection<Organ> Organs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Organ>("OrganDonorSystemModel.Organs_RecipientID", "Organs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Organ>("OrganDonorSystemModel.Organs_RecipientID", "Organs", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "fk_organType_organTypeID_ibfk_1", "OrganType")]
        public OrganType OrganType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<OrganType>("OrganDonorSystemModel.fk_organType_organTypeID_ibfk_1", "OrganType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<OrganType>("OrganDonorSystemModel.fk_organType_organTypeID_ibfk_1", "OrganType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<OrganType> OrganTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<OrganType>("OrganDonorSystemModel.fk_organType_organTypeID_ibfk_1", "OrganType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<OrganType>("OrganDonorSystemModel.fk_organType_organTypeID_ibfk_1", "OrganType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "Medical_Personnnel_has_Recipients", "Medical_Personnel")]
        public EntityCollection<Medical_Personnel> Medical_Personnel1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Medical_Personnel>("OrganDonorSystemModel.Medical_Personnnel_has_Recipients", "Medical_Personnel");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Medical_Personnel>("OrganDonorSystemModel.Medical_Personnnel_has_Recipients", "Medical_Personnel", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="OrganDonorSystemModel", Name="State")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class State : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new State object.
        /// </summary>
        /// <param name="stateID">Initial value of the stateID property.</param>
        /// <param name="state1">Initial value of the state1 property.</param>
        public static State CreateState(global::System.Int32 stateID, global::System.String state1)
        {
            State state = new State();
            state.stateID = stateID;
            state.state1 = state1;
            return state;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 stateID
        {
            get
            {
                return _stateID;
            }
            set
            {
                if (_stateID != value)
                {
                    OnstateIDChanging(value);
                    ReportPropertyChanging("stateID");
                    _stateID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("stateID");
                    OnstateIDChanged();
                }
            }
        }
        private global::System.Int32 _stateID;
        partial void OnstateIDChanging(global::System.Int32 value);
        partial void OnstateIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String state1
        {
            get
            {
                return _state1;
            }
            set
            {
                Onstate1Changing(value);
                ReportPropertyChanging("state1");
                _state1 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("state1");
                Onstate1Changed();
            }
        }
        private global::System.String _state1;
        partial void Onstate1Changing(global::System.String value);
        partial void Onstate1Changed();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "fk_State_stateID_ibfk_1", "City")]
        public EntityCollection<City> Cities
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<City>("OrganDonorSystemModel.fk_State_stateID_ibfk_1", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<City>("OrganDonorSystemModel.fk_State_stateID_ibfk_1", "City", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("OrganDonorSystemModel", "Medical_Personnel_ibfk_1", "Medical_Personnel")]
        public EntityCollection<Medical_Personnel> Medical_Personnel
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Medical_Personnel>("OrganDonorSystemModel.Medical_Personnel_ibfk_1", "Medical_Personnel");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Medical_Personnel>("OrganDonorSystemModel.Medical_Personnel_ibfk_1", "Medical_Personnel", value);
                }
            }
        }

        #endregion

    }

    #endregion

    
}
